# Config-Makefile for Husky-packages
# You must modify this file according to your needs.

## common options ##

# Build with debug info, link with debug version of CRT
DEBUG=0
DEBUG_TREE=0

# Enable optimization
OPTIMIZATION=0

# Build libraries as dlls. Buils static libs otherwise
DYNLIBS=1

# Link CRT statically
# It is useful for building binaries for distribution but it will generate big executables
# Don't use with DYNLIBS=1 without testing first
STATICCRT = 0

# Perl support
USE_PERL=0

# ZipInternal packer
USE_HPTZIP=1

# Uncomment one of these lines if you want to enable hardlinking
# on NTFS 4.0 or 5.0
#NTDEF	= -D_WIN32_WINNT=0 -D_WIN32_WINDOWS=0x0400 -DWINVER=0x0400
#NTDEF	= -D_WIN32_WINNT=0x0400
#NTDEF	= -D_WIN32_WINNT=0x0500

!if $(USE_PERL)==1
PERL_DIR = C:\Perl
PERLV    = 510
PERLL    = delayimp.lib $(PERL_DIR)\lib\core\perl$(PERLV).lib
PERLI    = -I$(PERL_DIR)\lib\core
PERLD    = -DDO_PERL -DWIN32 -DNO_STRICT -DHAVE_DES_FCRYPT -DPERL_IMPLICIT_CONTEXT -DPERL_IMPLICIT_SYS -DPERL_MSVCRT_READFIX
PERLDLL  = /delayload:perl$(PERLV).dll
PERLOBJ  = perl$(_OBJ)
!else
PERLOBJ  = dummy$(_OBJ)
PERLI    =
PERLD    =
PERLDLL  =
!endif


!if $(USE_HPTZIP) == 1

!if $(DYNLIBS)==1
HPTZIPL = $(LIBOUT)/$(IMPLIBPREFIX)hptzip$(DLLSUFFIX)$(_LIB)
!else
HPTZIPL = $(LIBOUT)/$(LIBPREFIX)hptzip$(LIBSUFFIX)$(_LIB)
!endif

# path to "hptzip/hptzip.h"
HPTZIPI = -I../../hptzip

HPTZIPD = -DUSE_HPTZIP

ZLIBH	= ../../hptzip/zlib-win32
# or set it to directory with zlib sources
#ZLIBH	= 

!if $(DEBUG) == 1
# You can set both to the same value if no debug version exist or if
# no zlib debug is needed.
# ZLIBL can point to static library or import library for dll.
# This choice does not depend on DYNLIBS value. Do keep in mind though 
# that official zlib1.dll is linked against msvcrt.dll and it is recommended 
# to link any app using it against same dll, which is not possible
# 'out of the box' for MSVC2003 and newer. Therefore linking zlib statically
# seems to be preferable, especially if you build hptzip itself as dll.
ZLIBL   = ../../hptzip/zlib-win32/zlib.lib
!else
ZLIBL   = ../../hptzip/zlib-win32/zlib.lib
!endif

!endif


## programs ##

# C-Compiler
CC      = cl
# archiver (for object-files)
AR      = lib
# linker
LINK    = link
#
RANLIB  =
# remove file
RM      = del
#copy a file
CP      = copy
# rename a file
MV       = move
# create directory
MKDIR    = mkdir

## directories ##

!if $(DEBUG)==1
TOPDIR=../../Debug/
!else
TOPDIR=../../Release/
!endif

!if [if not exist $(TOPDIR:/=\) $(MKDIR) $(TOPDIR:/=\)] == 0
OBJOUT2=$(TOPDIR)obj/
BINOUT=$(TOPDIR)bin/
LIBOUT=$(TOPDIR)lib/

!if [if not exist $(OBJOUT2:/=\) $(MKDIR) $(OBJOUT2:/=\)] != 0
OBJOUT2=
OBJOUT=
!endif
!if [if not exist $(BINOUT:/=\) $(MKDIR) $(BINOUT:/=\)] != 0
BINOUT=$(TOPDIR)
!endif
!if [if not exist $(LIBOUT:/=\) $(MKDIR) $(LIBOUT:/=\)] != 0
LIBOUT=$(TOPDIR)
!endif

!else
OBJOUT=
BINOUT=
LIBOUT=
!endif

!if "$(OBJOUT2)" != "" && "$(LIBNAME)" != ""

OBJOUT1=$(OBJOUT2)$(LIBNAME)/

!if [if not exist $(OBJOUT1:/=\) $(MKDIR) $(OBJOUT1:/=\)] == 0
OBJOUT=$(OBJOUT1)
!else
OBJOUT=$(OBJOUT2)
!endif

!endif


## macroses for makefile.inc ##
O=$(OBJOUT)
B=$(BINOUT)
L=$(LIBOUT)
H=$(H_DIR)

## file suffixes ##
_C      = .c
_OBJ    = .obj
_LIB    = .lib
_EXE    = .exe
_DLL    = .dll
_EXP    = .exp
_ILK    = .ilk
_PDB    = .pdb

## Library filename elements ##

# Prefix to construct static library name
LIBPREFIX=
# Prefix to construct dll name
DLLPREFIX=
# Suffix to construct library name
LIBSUFFIX=mvc
# Suffix to construct dll name
DLLSUFFIX=mvc

!if $(DEBUG)==1
LIBSUFFIX=$(LIBSUFFIX)d
DLLSUFFIX=$(DLLSUFFIX)d
!endif

IMPLIBPREFIX=imp_$(DLLPREFIX)

## Some common constructed filenames ##
PROGRAMSILK=$(PROGRAMS:.exe=.ilk)
PROGRAMSPDB=$(PROGRAMS:.exe=.pdb)

IMPLIBNAME=$(LIBOUT)$(IMPLIBPREFIX)$(LIBNAME)$(DLLSUFFIX)
DLLNAME=$(BINOUT)$(DLLPREFIX)$(LIBNAME)$(DLLSUFFIX)
DLLIMPORTLIB=$(IMPLIBNAME)$(_LIB)

#############################################################################
# program options
#############################################################################

# type of operating system (UNIX,MSDOS,OS2,WINNT)
# for BeOS, use UNIX!
OSTYPE=WINNT

# short name of operating system (used for PID lines etc.)
UNAME=WIN32
#UNAME=LNX
#UNAME=BSD
#UNAME=OS2
#UNAME=BEOS

# C-compiler: specify name of executable
EXENAMEOPT= -Fe
# C-compiler: specify name of object file
OBJNAMEOPT= -Fo
# LIB: specify output file name
LIBNAMEOPT= /out:
# LINK: specify output file name
LINKNAMEOPT= /OUT:
LINKPDBOPT= /PDB:

# C-compiler: options for compile only (link is off)
OBJOPT  = -c

# C-compiler: generate warnings
WARNFLAGS=-Wall

# C-compiler: defines
CDEFS =-D__NT__ -D_CONSOLE $(HPTZIPD) $(PERLD) $(NTDEF)

!if $(DYNLIBS)==1
CDEFS = $(CDEFS) -D_MAKE_DLL
!endif

!if $(DEBUG)==1
DEBCDEFS =-D_DEBUG -DDEBUG -D_CRTDBG_MAP_ALLOC -D_CRT_SECURE_NO_DEPRECATE -D_CRT_SECURE_NO_WARNINGS
!else
DEBCDEFS =-DNDEBUG -D_CRT_SECURE_NO_DEPRECATE -D_CRT_SECURE_NO_WARNINGS
!endif

CFLAGS =-nologo

# C-compiler: debug
!if $(DEBUG)==1

# -Wall produces screenfulls of useless warnings about win header files unless the following warnings are omitted:
# c4255 == 'function' : no function prototype given: converting '()' to '(void)'
# c4668 == 'symbol' is not defined as a preprocessor macro, replacing with '0' for 'directives'
# c4820 == padding added into a struct
# other superfluous warnings:
# c4100 == unreferenced formal parameter
# c4005 == macro redefinition (crtdbg.h <=> msvc.h)
# c4826 == Conversion from 'const void *' to 'void *' is sign-extended. I have no clue what it means, but basetsd.h triggered it.
DEBCFLAGS=/nologo /Zi /GS /Wall /wd4668 /wd4255 /wd4820 /wd4100 /wd4005 /wd4826

!else

DEBCFLAGS=/nologo /W2

!endif

# It is not recommended to build dlls with static linkage against crt
# as it may cause problems with resource management.
# Check if it will actually work if you like.
!if $(STATICCRT)==1 && $(DYNLIBS)==0
# use /ML for mvc before 2005
!if $(DEBUG)==1
CFLAGS =$(CFLAGS) /MTd
!else
CFLAGS =$(CFLAGS) /MT
!endif

!else

!if $(DEBUG)==1
CFLAGS =$(CFLAGS) /MDd
!else
CFLAGS =$(CFLAGS) /MD
!endif

!endif

# C-compiler: optimization
!if $(OPTIMIZATION)==1
OPTCFLAGS=/O2 /Oi-
!else
OPTCFLAGS=/Od
!endif

CFLAGS =$(CFLAGS) $(DEBCFLAGS) $(OPTFLAGS) $(CDEFS) $(DEBCDEFS)


LFLAGS=/NOLOGO /LIBPATH:$(LIBOUT)

# object linker: optimization
!if $(OPTIMIZATION)==1
OPTLFLAGS=/OPT:REF
!else
OPTLFLAGS=/OPT:NOREF
!endif

# object linker: debug
!if $(DEBUG)==1
DEBLFLAGS=/DEBUG
!else
DEBLFLAGS=
!endif

COMMONLIBS=

# Common linker options
LFLAGS=$(LFLAGS) $(OPTLFLAGS) $(DEBLFLAGS) $(COMMONLIBS)

# Linker options passed via compiler command-line
CLFLAGS =/link $(LFLAGS)

# Linker options for building dll
LDLLFLAGS=$(LFLAGS) /DLL

# options for removing files (e.g. for clean, distclean, uninstall)
RMOPT =

# archiver options
ARFLAGS = /nologo

# options for creating directories
MKDIROPT=-p


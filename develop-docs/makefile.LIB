# $Id$

# This is "legacy makefile" template to build husky library
# using native compiler and make utility (Usually for win32, OS/2, DOS, ...)
# Copy this file into your work directory; set programs, *PREFIX, *SUFFIX,
# LIBS, _OBJ and above; (possible) edit make rules.
# See also makefile.INC

# Makefile to build XXXXX with ZZZZZ C on YYYYY
# No support for the Husky build environment.

# Uncomment this for compile info for gdb and display more compiler warnings
DEBUG	= -g -pedantic

# Uncomment this for strip all simbols from binaries to reduce file sizes
#STRIP	= -s


## programs ##

# compiler
CC	= gcc
# library tool
AR	= ar
# library indexer
RANLIB	= ranlib
# linker program
LINK	= ld
# archiver program
ARCHIVER= zip
# file removing command
RM	= rm
# create directory command
MKDIR	= mkdir
# remove directory command
RMDIR	= rm
# copy command
CP	= cp
# move command
MV	= mv
# install command
INSTALL	= install
# groff program (man pages formatter, possible use man2html perl script)
GROFF	= /usr/bin/groff

## file suffixes ##

# source file
_C	= .c
# object file
_OBJ	= .o
# binary (executable) file
_EXE	= .exe
# static library
_LIB	= .a
# shared library
_DLL	= .dll
# shared library definitions file (export/import lists & etc.)
_DEF	= .def
# shared library exported list
_EXP	= .exp
# archive (package) file
_ARC	= .zip
# documentation file (".info", ".html", ".div", ...)
_HTML	= .html
# text file
_TXT	= .txt


## program options ##

# compiler defines
CDEFS	=
# common compiler options
CFLAGS	= -Wall -O3
# linker options
LFLAGS	=
# options for compile only (link is off)
OBJOPT	= -c
# options for build static library
LIBOPT	= -static
# options for build dll
DLLOPT  = -shared
# option for specify output file name
NAMEOPT	= -o
# options for $(AR) program
ARFLAGS	= rs
# options for $(RM) program
RMFLAGS	= -f
# options for archiver
ARCFLAGS= -9 -r
# create directory command options
MKDIROPT= -p
# remove directory command options
RMDIROPT= -rf
# install command options
INSTOPT	= -c
# copy command options
CPOPT	= -f
# move command options
MVOPT	= -uf
# groff program option (this example doing format man page to html page)
GROFFOPT= -mman -Thtml


## Library filename elements ##

# Prefix to construct static library name
LIBPREFIX=lib
# Prefix to construct dll name
DLLPREFIX=
# Suffix to construct library name
LIBSUFFIX=xxx
# Suffix to construct dll name
DLLSUFFIX=

## make directives ##

# rules without dependencies and (possible) actions - prevent warnings
.PHONY:	distclean clean all static dll programs default doc package

## Default make rule ##

default:
	@echo Run 'make dll' to build dll version \($(TARGETDLL), $(PROGRAMS)\)
	@echo Run 'make static' to build static version \($(TARGETLIB), $(PROGRAMS)\)
#	@echo Run 'make dllprograms' to build dll version of programs \($(PROGRAMS)\)
	@echo Run 'make programs' to build static version of programs \($(PROGRAMS)\)
	@echo Run 'make all' to build all above

## include common makefiles part ##

include makefile.inc

# libraries need to build binary file
LIBS	+=

## other, usualy not modify below ##

## Additions (add into end of strings) ##
CFLAGS	+= -I$(H_DIR)

## make rules ##

all:	static dll programs

static:	$(TARGETLIB)
dll:	$(TARGETDLL)
programs: $(TARGETLIB) $(PROGRAMS)
dllprograms: $(TARGETDLL) $(PROGRAMS)

%$(_EXE): $(SRC_DIR)%$(_C) $(TARGETLIB)
	$(CC) $(STRIP) $(DEBUG) $(CFLAGS) $(CDEFS) $(NAMEOPT)$@ $^ $(LIBS)

%$(_OBJ): $(SRC_DIR)%$(_C)
	$(CC) $(CFLAGS) $(STRIP) $(DEBUG) $(CDEFS) $(OBJOPT) $<

$(TARGETLIB):	$(OBJS)
	$(AR) $(ARFLAGS) $@ $?
#	$(RANLIB) $@   # 'ar rs' doing this
	
$(TARGETDLL):	$(OBJS)
	$(CC) $(DLLOPT) $(CFLAGS) $(STRIP) $(DEBUG) $(NAMEOPT)$@ $^


clean:
	-$(RM) $(RMOPT) *$(_OBJ)
	-cd ../doc ; make clean

distclean: clean pkgclean
	-$(RM) $(RMOPT) $(TARGETDLL)
	-$(RM) $(RMOPT) $(TARGETLIB)
	-$(RM) $(RMOPT) $(PROGRAMS)
	-cd ../doc ; make distclean

doc:
	cd ../doc ; make html

pkg-doc-dir:
	-$(MKDIR) $(MKDIROPT) $(PACKAGEBASE)/doc

pkg-doc: pkg-doc-dir
	$(CP) $(CPOPT) ../doc/*$(_HTML) $(PACKAGEBASE)/doc

pkg-man: pkg-doc-dir
	for f in ../man/*.1 ; \
	 do $(GROFF) $(GROFFOPT) $$f > $(PACKAGEBASE)/doc/`basename $$f`$(_HTML) ; done

pkg-man-alt:
	-$(MKDIR) $(MKDIROPT) $(PACKAGEBASE)/man/man1
	$(CP) $(CPOPT) ../man/*.1 $(PACKAGEBASE)/man/man1
	-$(MKDIR) $(MKDIROPT) $(PACKAGEBASE)/man/man5
	$(CP) $(CPOPT) ../man/*.5 $(PACKAGEBASE)/man/man5
	-$(MKDIR) $(MKDIROPT) $(PACKAGEBASE)/man/man8
	$(CP) $(CPOPT) ../man/*.8 $(PACKAGEBASE)/man/man8
	
pkg-dir:
	-$(MKDIR) $(MKDIROPT) $(PACKAGEBASE)

pkg-h-dir:
	-$(MKDIR) $(MKDIROPT) $(PACKAGEBASE)/$(LIBNAME)

$(HEADERS): pkg-h-dir
	$(CP) $(CPOPT) $(H_DIR)$@ $(PACKAGEBASE)/$(LIBNAME)/$@

pkg-h: $(HEADERS)

pkg-readme: pkg-dir
	@echo XXXXX library v.$(VER) for `uname -s` platform > $(PACKAGEBASE)/file_id.diz
	@echo "(Part of HUSKY Fidonet Software Project)" >> $(PACKAGEBASE)/file_id.diz
	@echo See http://husky.sourceforge.net and/or >> $(PACKAGEBASE)/file_id.diz
	@echo http://sourceforge.net/projects/husky >> $(PACKAGEBASE)/file_id.diz
	$(CP) $(CPOPT) ../COPYING ../cvsdate.h ../INSTALL ../LICENSE $(PACKAGEBASE)
	$(CP) $(CPOPT) ../HISTORY ../ChangeLog ../VERSION ../README  $(PACKAGEBASE)

pkg-bin-dir:
	-$(MKDIR) $(MKDIROPT) $(PACKAGEBASE)/bin

pkg-bin: pkg-bin-dir
	$(CP) $(CPOPT) $(TARGETLIB) $(TARGETDLL) $(PROGRAMS) $(PACKAGEBASE)/bin

package: static dll programs doc pkg-dir pkg-h pkg-doc pkg-man pkg-readme pkg-bin
	$(ARCHIVER) $(ARCFLAGS) $(PACKAGENAME) $(PACKAGEBASE)/*

pkgclean:
	-$(RM) $(RMOPT) $(PACKAGENAME)
	-$(RM) $(RMOPT) $(PACKAGEBASE)/$(LIBNAME)/*
	-$(RMDIR) $(RMDIROPT) $(PACKAGEBASE)/$(LIBNAME)
	-$(RM) $(RMOPT) $(PACKAGEBASE)/doc/*
	-$(RMDIR) $(RMDIROPT) $(PACKAGEBASE)/doc
	-$(RM) $(RMOPT) $(PACKAGEBASE)/man/*
	-$(RMDIR) $(RMDIROPT) $(PACKAGEBASE)/man
	-$(RM) $(RMOPT) $(PACKAGEBASE)/*
	-$(RMDIR) $(RMDIROPT) $(PACKAGEBASE)
